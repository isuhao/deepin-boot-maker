/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p showmenu_interface.h:showmenu_interface.cpp -c ShowmenuInterface /home/ph/Team/QtDBusXmlTool/showmenu.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MENU_INTERFACE_H_1436341908
#define MENU_INTERFACE_H_1436341908

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.menu.Menu
 */
class MenuInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.menu.Menu"; }

public:
    MenuInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~MenuInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> SetItemActivity(const QString &itemId, bool isActive)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemId) << QVariant::fromValue(isActive);
        return asyncCallWithArgumentList(QStringLiteral("SetItemActivity"), argumentList);
    }

    inline QDBusPendingReply<> SetItemChecked(const QString &itemId, bool checked)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemId) << QVariant::fromValue(checked);
        return asyncCallWithArgumentList(QStringLiteral("SetItemChecked"), argumentList);
    }

    inline QDBusPendingReply<> SetItemText(const QString &itemId, const QString &text)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(itemId) << QVariant::fromValue(text);
        return asyncCallWithArgumentList(QStringLiteral("SetItemText"), argumentList);
    }

    inline QDBusPendingReply<> ShowMenu(const QString &menuJsonContent)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(menuJsonContent);
        return asyncCallWithArgumentList(QStringLiteral("ShowMenu"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ItemInvoked(const QString &itemId, bool checked);
    void MenuUnregistered();
};

#endif
